#!/usr/bin/env node
/*
 * <p>Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.
 * Please see the LICENSE file for information about licensing.</p>
 *
 * Provides a "server-like" interface for studio to interact with the code processor
 * @author Bryan Hughes &lt;<a href='mailto:bhughes@appcelerator.com'>bhughes@appcelerator.com</a>&gt;
 */

var path = require('path'),
	fs = require('fs'),
	existsSync = fs.existsSync || path.existsSync,

	winston = require('winston'),
	appc = require('node-appc'),

	CodeProcessor = require(path.resolve(path.join(__dirname, '..'))),

	command = process.argv[2];

switch(command) {
	case 'plugins':
		queryPlugins();
		break;
	case 'options':
		queryOptions();
		break;
	case 'run':
		run();
		break;
	case 'help':
		printHelp();
		break;
	case undefined:
		console.log('Missing command');
		printHelp();
		process.exit(1);
		break;
	default:
		console.log('Unknown command "' + command + '"');
		printHelp();
		process.exit(1);
		break;
}

function printHelp() {
	console.log(
		'\n' +
		'Usage: subprocess run <config file>\n' +
		'       subprocess queryPlugins [<search path> [<search path> [...]]]\n' +
		'       subprocess queryOptions\n\n' +
		'Commands:\n' +
		'   run       Runs the Titanium Code Processor using the supplied config file in interactive mode\n' +
		'   plugins   Queries the plugins in the default search path and the listed search paths\n' +
		'   options   Queries the options\n\n' +
		'Note: this interface is only intended for applications that subprocess the Titanium Code Processor\n');
}

function queryPlugins() {
	CodeProcessor.queryPlugins(function (err, results) {
		if (err) {
			console.error(err);
			process.exit(1);
		} else {
			console.log(JSON.stringify(results));
		}
	});
}

function queryOptions() {
	CodeProcessor.queryOptions(function (err, results) {
		if (err) {
			console.error(err);
			process.exit(1);
		} else {
			console.log(JSON.stringify(results));
		}
	});
}

function run() {

	var configFile = process.argv[3],
		studioInterface;
	studioInterface = appc.messaging.create('stdio');
	studioInterface.open();

	// Parse the config file
	if (typeof configFile === 'undefined') {
		console.error('Config file not specified');
		process.exit(1);
	}
	if (!existsSync(configFile)) {
		console.error('Could not find config file "' + configFile + '"');
		process.exit(1);
	}
	try {
		configFile = JSON.parse(configFile);
	} catch(e) {
		console.error('Could not parse config file: ' + e);
		process.exit(1);
	}

	// Validate the entry point
	if (!configFile.entryPoint) {
		console.error('Missing entry point in config file');
		process.exit(1);
	}

	// Listen for the exit message
	studioInterface.listen('exit', function (request, response) {
		studioInterface.close();
		process.exit(1); // TODO: update with something more advanced
	});
}